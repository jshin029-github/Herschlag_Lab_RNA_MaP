# Determine how many barcodes of each library variant are present in a library
# input :read the .unq file for a RNA-MaP library generated by compressBarcodes_v8.py (greenleaf lab program)
#loop through the consensus seq column and make a dictionary counter for each time this matches one of the 30,000 seqs ordered
#output: a histogram of all 29,800 seqs ordered from CustomArray witht he number of barcode hits
# make a csv with the dictionary consensus seqs and the number of counts they had

# make a list of all input seqs
# make a matching list of counters (by position)

import pandas as pd
from joblib import Parallel, delayed
import argparse

#tool to troubleshoot if needed:

# rvs_comp function takes a list of sequences and outputs an equal length list of the rvs_complements of the sequences it read
def reverse_complement(seq):
    comp = { 'A':'T', 'G':'C', 'C':'G', 'U':'A', 'T':'A' }
    l = []
    rvs = seq[::-1]

    for i in rvs:
        l.append(comp[i])
        #print(l)
    s = ''.join(l)
    return(s)

def finder(c,libchar):

    nlib = libchar.shape[0]
    cassign = []
    lassign = []

    for l in libchar.iterrows(): # for each library variant
        l = l[1]
        lrc = reverse_complement(l['chip_sequence'])
        try:
            if lrc in c['sequence']:
                cassign.append(c['barcode'])
                lassign.append(l['variant'])
                print "%s \t %s \t %s" % (c['sequence'], lrc, l['chip_sequence'])
        except:
            pass
    return cassign,lassign


def finder2(l,consen):

    cassign = []
    lassign = []

    lrc = reverse_complement(l['chip_sequence'])

    found_barcodes = consen.loc[
        consen['sequence'].str.extract('('+lrc+')',expand=True).dropna().index
    ]
    found_barcodes = list(found_barcodes['barcode'])

    cassign += found_barcodes
    lassign += [l['variant']] * len(found_barcodes)
    return cassign,lassign

#------------------------------------------------

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Extract barcode sequence')
    parser.add_argument('--CPseq_filename','-i',
                        type=str, help='csv containing library')
    parser.add_argument('--libchar_filename','-l',
                        type=str, help='Input CPseq file')
    parser.add_argument('--out_filename','-o',
                        type=str, help='csv containing library')
    parser.add_argument('--num_cores','-c',
                        type=int, help='number of cores to use')


    args = parser.parse_args()
    CPseq_filename = args.CPseq_filename
    libchar_filename = args.libchar_filename
    out_filename = args.out_filename
    num_cores = args.num_cores

    lc = pd.read_csv(libchar_filename)
    libchar = lc.loc[:, ['chip_sequence', 'variant']]
    consen = pd.read_csv(CPseq_filename, sep="\t")
    consen = consen.loc[:, ['sequence', 'barcode']]

    # res = (Parallel(n_jobs=num_cores,verbose=10)
    #       (delayed(finder)(consen.iloc[i],libchar) for i in range(len(consen))))

    res = (Parallel(n_jobs=num_cores,verbose=10)
      (delayed(finder2)(libchar.iloc[i],consen) for i in range(len(libchar))))

    # print(res)
    cassign = sum([l[0] for l in res],[])
    lassign = sum([l[1] for l in res],[])

    out = pd.DataFrame()
    out['barcode'] = cassign
    out['variant'] = lassign
    out.to_csv(out_filename, sep="\t", header=True, index=False)
